datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"] // You won't need this in Prisma 3.X or higher.
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")

	//추가 정보
  createdAt    DateTime @default(now()) @map ("created_at")
  updatedAt    DateTime @updatedAt @map ("update_at")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
	Authenticator Authenticator[]

  @@map("users")

	// 추가 정보
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt

  nickname     String?
	userState    UserState? @relation(fields: [nickname], references: [nickname])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")

	// 추가 정보
  id         String   @id @default(cuid())
	email      String
	createdAt  DateTime @default(now())
	updatedAt  DateTime @updatedAt
}

model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserState {
  id            String    @id @default(cuid()) @unique
  nickname      String		@unique
	avatar        String?
  devices       Device[]
  user          User[]
}

model Device {
  id            Int         @id

  deviceUID     String      @default(cuid()) @map("device_uid") @db.VarChar(64)

  name          String?     @db.VarChar(80)
  locationName  String?     @db.VarChar(200)
  lastSeenAt    DateTime?

  userStateID   String
  userState     UserState     @relation(fields: [deviceUID], references: [id])
}
